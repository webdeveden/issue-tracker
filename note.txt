install react-hook-form@7.46.1
 = import useform and controller component from react hook form

 interface with a shape of our form:


install axios@1.5.0



SPINNER

Tailwind element spinner on google


SHOWING ISSUES

use prisma to fetch data from our database

findmany.

showing badges using radix ui

create a separate component for this " IssuesStatusBadge"
predefining the label and color of status by create a const statusMap:
colors are: red, violet,green


commit : Build the issue status badge


ADDING LOADING SKELETON

npm i react-loading-skeleton@3.3.1

npm i delay (= to simulate slow connection)

create a loading file in the same page folder you want to simulate : LoadingIssuesPage


=> google npm react loading skeleton doc

commit: aading page skeleton

DISPLAY ISSUES

=> Create an IssueDetailPage by creating and id folder
=> using prisma fethe the unique id
=> create a sepate loading file(loadingissuesdetailpage ) in issues/[id]
= for new segment too install a different loading file (loadingnewissue page)
commit: show issue details

Changing the style in pagedetails
:
=> heading for title
=> status as the badge
=> use flex to fles 2 elements
=> use card for description

comit: style the issue detail page

ADDING A MARKDOWN preview

=> install this package to keep the format of your typed text:
-npm i react-markdown@8.0.7
- intall tailwing typography: follow the doc
 npm i -D tailwindcss/typography

- in your pagedetail import ReactMarkdown 
- use the ReactMarkdown element where your description will be

commit: Add markdown preview

Building skeleton for detailpage:

=> grab the code snipest from the page in app/issues/page
=> npm i react-loading-skeleton@3.3.1
=> import skeleton 
=> import react-loading-skeleton/description
(= google search:react loading skeleton )

in the new page loading use 2 skeletons

ADDING AN EDIT BUTTON ON THE RIGHT OF THE page

= in the issue/id/page where we view detail 
add a grid with 2 colomnn and 2 elements of box
- on mobile devices make sure you have just one column(view radix documentation under breakpoint)
-add a gap of 5
- add an icon (npm i @radiux-ui/react-icons)
- when edit is clicked take him to /issues/userd.id/edit

commit: Add the edit button

APPLYING THE SINGLE RESPONSABILITY PRINCIPLE

=>each component should be responsible of a specific task

- create a component in id folder " EditIssueButton" to move our edit button over there
- create another component "IssueDetails" and move our detail element in there

BUILDING THE EDIT page

= Create edit folder inside id folder "editissuepage"
= since our edit page will be the samee as page in new folder, create a reusable component insite the issue folder 
under _component "IssueForm"
- so we can initialize the  info of our issue will have to 
pass the issue props of our database from prisma

create an API endpoint for editing

- create [id] folder inside your API folder and add a route file

UNDERSTANDING CACHING

=> disbaling cacshing 
- (google search: nextjs route segment config )

Improving page loading:

- create a reusable issueformloading component inside issues /_component
- loading the entire form dynamic using lazy loading
- do the same on the edit page, make sure the form in there is also loaded dynamically

commit: Improve the loading experience

DELETING ISSUES

= add a delete button by creating a separate component in the id folder "deleteissueButton"
= pass the issueId prop
= color to red
= lay them vertically using with direction column
= gap of 4
= allocate 80% of width to details and 20% for the button use tailwind col-span-4 class
= use the container element of radiusui to set up the max width and content alignement centered

commit: Add a delete button

AUTHENTICATION WITH NEXTAUTH

- npm i next-auth(4.23.1)
- in the api folder create an /auth/[...nextauth]/route.ts 
- go to the env file and add 2 environement variable:
-- NEXTAUTH_URL="address fo our website"
-- NEXTAUTH_SECRET="random string used to encrypt json web  tokens"(generete using : openssl rand -base64 32)

commit: set up next auth
- configuring google provider:(console.cloud.google.com)

commit: Configure google provider

configuring the prisma adapter , so when someone signup or sign in we store their credentials in the database
(see nextauth.js doc about adapters)
- npm i @next-auth/prisma-adapter@1.0.7
- npm i prisma --save-dev

in your /api/auth[...nextauth]/route.ts, import:
- import {PrismaAdapter} from "@next-auth/prisma/adapter"
- import prisma from "@/prisma/client"
`
set session: {strategy:'jwt'}

sync our change on database: npx prisma migrate dev -name "add user model"

commit: Add the prisma adapter

ADDING A LOGIN AND LOGOUT LINKS:
=> using the session hook from next-auth/react
- const {status,data:session} =useSession 
- create a folder in the app folder (app/auth/Provider.tsx), make it a client element
-then wrap the element of your body in the layout with the authprovider you defined


Securing our app using a middleware:

=> in the route of the project add "middleware.ts"

ASSIGNING ISSUES TO USERS

=> Using the select element in radius ui
- create an assigneeSelect in /issues/[id]

commit: Build the assignee select component.

POPULATING THE ASSIGNEE SELECT COMPONENT 

=> we want our select element to populate users from our database
=> to do so , we need to build an api client to our server and have the assigneeselect component fetch the user from our server
- in api add a folder called /users/route.ts

Fetching data using react query:

- npm i @tanstack/react-query@4.35.3
- in the app/ QueryclientProvider.tsx
- import QueryClient.

commit: set up react Query
`
USING TOAST NOTIFICATION:

-npm i react-hot-toast@2.4.1
- to our assignee component :
    - import toast, {Toaster} from 'react-hot-toast,
- add the try catch block and await the axios patch request
- if error displays the message "Changes could not be saved"

commit: show toast NOTIFICATION


Filtering issue by their status

- create a component in /issues/list/ "IssueStatusFilter"
- use the select element from radix ui

commit: Build the filter component

filtering issues:

- in our IssueStatusFilter, onvalue change in select.root
- when the issue is click use userouter to navigate the use to a query string:
(= ?status=value)

SORTING TABLE.
- in issuepage.tsx:
=> making the column clickable and the send them as query params
- store our column in. array and then map them (column)
-

=> Sorting data
- use useSearchparams hook and new URLsearchParams

- generating dummy data for pagination using ChatGPT:

' Given the following prisma model ,generate SQL statement to insert 20 records in the issue table. use real-world titles and description for issues. status can be OPEN, IN-PROGRESS or CLOSED. Description should be a paragraph
long. Provide different values for createdAt and updatedAt columns '.

=> Pagination :

- create a resusable component called pagination
- with few props : itemCount of number type, pagesize (number), curenPage(number)
- use the flex element from radixui
- add text and 2 buttons

=> implementing pagination

- use 2 hooks: useRouter and useSearchParams
- use new URLsearchParam 

-paginating issues

=> issuepage , add page parameter to our props
= fetch the issue for a given page , 
= add 2 property on your issues fetcher, skip(number of record to skip ) 
and take(number of record we wanna fetch per page)

= get the total number of issues(=using prisma.issue.count)